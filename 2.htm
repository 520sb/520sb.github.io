<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>流量监控背景</title>

</head>
<body style="overflow-x:hidden;">
    <canvas id="canvas" ></canvas>
</body>

<script>

		canvas = document.getElementById('canvas');
		ctx = canvas.getContext('2d'); 
		//宽高可自行设置
		w = canvas.width = window.innerWidth;		
		h = canvas.height = window.innerHeight-50; 
		
		hue = 217; 
		stars = [];
		count = 0,
		//设置星星数量
		maxStars = 1500;
		
		canvas2 = document.createElement('canvas');
		w2 = canvas2.width = 100;
		h2 = canvas2.height = 100;
		ctx2 = canvas2.getContext("2d");
		gradientCache = ctx2.createRadialGradient(w2 / 2, h2 / 2, 0, w2 / 2,
				h2 / 2, w2 / 2);
		gradientCache.addColorStop(0.025, '#fff');
		gradientCache.addColorStop(0.1, 'hsl(' + hue + ', 61%, 33%)');
		gradientCache.addColorStop(0.25, 'hsl(' + hue + ', 64%, 6%)');
		gradientCache.addColorStop(1, 'transparent');
		ctx2.fillStyle = gradientCache;
		ctx2.beginPath();
		ctx2.arc(w2 / 2, h2 / 2, w2 / 2, 0, Math.PI * 2);
		ctx2.fill();
		
		function random(min, max) {
			if (arguments.length < 2) {
				max = min;
				min = 0;
			}
			if (min > max) {
				var hold = max;
				max = min;
				min = hold;
			}
			return Math.floor(Math.random() * (max - min + 1)) + min;
		}
		
		function maxOrbit(x, y) {
			var max = Math.max(x, y), diameter = Math.round(Math.sqrt(max * max
					+ max * max));
			return diameter / 2;
		}

		Star = function() {
			this.orbitRadius = random(maxOrbit(w, h));
			this.radius = random(60, this.orbitRadius) / 10;
			this.orbitX = w / 2;
			this.orbitY = h / 2;
			this.timePassed = random(2, maxStars);	
			this.speed = random(this.orbitRadius) / 120000;//设置旋转速度,数值越小速度越快
			this.alpha = random(2, 10) / 10;
			count++;
			stars[count] = this;
		}

		Star.prototype.draw = function() {
			x = Math.sin(this.timePassed) * this.orbitRadius + this.orbitX,
					y = Math.cos(this.timePassed) * this.orbitRadius
							+ this.orbitY, twinkle = random(10);

			if (twinkle === 1 && this.alpha > 0) {
				this.alpha -= 0.05;
			} else if (twinkle === 2 && this.alpha < 1) {
				this.alpha += 0.05;
			}

			ctx.globalAlpha = this.alpha;
			ctx.drawImage(canvas2, x - this.radius / 2, y - this.radius / 2,
					this.radius, this.radius);
			this.timePassed += this.speed;
		}

		for (var i = 0; i < maxStars; i++) {
			new Star();
		}

		function start() {
			ctx.globalCompositeOperation = 'source-over';
			ctx.globalAlpha = 1;
			ctx.fillStyle = 'hsla(' + hue + ', 64%,6%,0.2)';//最后小数设置星轨残影，数值越大残影越小
			ctx.fillRect(0, 0, w, h)

			ctx.globalCompositeOperation = 'lighter';
			for (var i = 1, l = stars.length; i < l; i++) {
				stars[i].draw();
			}
			;
			window.requestAnimationFrame(start);
		}

		start();
	
</script>
</html>
————————————————
版权声明：本文为CSDN博主「zhuxiongyin」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/zhuxiongyin/article/details/91348971
